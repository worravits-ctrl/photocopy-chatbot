require('dotenv').config();

const express = require('express');
const line = require('@line/bot-sdk');
const XLSX = require('xlsx');
const path = require('path');
const fs = require('fs');

const app = express();

// Environment Variables
const channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const channelSecret = process.env.LINE_CHANNEL_SECRET;
const port = process.env.PORT || 3000;

console.log('Environment check:');
console.log('- LINE_CHANNEL_ACCESS_TOKEN:', channelAccessToken ? `Set ‚úÖ (${channelAccessToken.substring(0, 20)}...)` : 'Not set ‚ùå');
console.log('- LINE_CHANNEL_SECRET:', channelSecret ? `Set ‚úÖ (${channelSecret.substring(0, 10)}...)` : 'Not set ‚ùå');
console.log('- PORT:', port);

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot
let client;
let lineConfig;
if (channelAccessToken && channelSecret) {
    lineConfig = {
        channelAccessToken: channelAccessToken,
        channelSecret: channelSecret,
    };
    client = new line.Client(lineConfig);
    console.log('LINE Bot client initialized ‚úÖ');
} else {
    console.log('LINE Bot client skipped ‚ö†Ô∏è - Missing credentials');
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ (default ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Excel)
let priceData = {
    'A4_BW_Single': 0.5,
    'A4_BW_Double': 1,
    'A4_Color_Single': 2,
    'A4_Color_Double': 4,
    'A3_BW_Single': 1,
    'A3_BW_Double': 2,
    'A3_Color_Single': 4,
    'A3_Color_Double': 8
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel
function loadPricesFromExcel() {
    const excelFiles = ['prices.xlsx', '‡∏£‡∏≤‡∏Ñ‡∏≤.xlsx', 'price-list.xlsx'];
    
    for (const fileName of excelFiles) {
        const filePath = path.join(__dirname, fileName);
        
        if (fs.existsSync(filePath)) {
            try {
                console.log(`üìä ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å: ${fileName}`);
                
                const workbook = XLSX.readFile(filePath);
                const sheetName = workbook.SheetNames[0]; // ‡πÉ‡∏ä‡πâ sheet ‡πÅ‡∏£‡∏Å
                const worksheet = workbook.Sheets[sheetName];
                const data = XLSX.utils.sheet_to_json(worksheet);
                
                console.log(`üìã ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${data.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                
                // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Excel ‡πÄ‡∏õ‡πá‡∏ô priceData object
                const newPriceData = {};
                
                data.forEach((row, index) => {
                    try {
                        // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö column names
                        const paperSize = row['‡∏Ç‡∏ô‡∏≤‡∏î'] || row['Size'] || row['paper_size'] || row['Paper Size'] || 'A4';
                        const color = row['‡∏™‡∏µ'] || row['Color'] || row['color'] || row['Type'] || 'BW';
                        const sides = row['‡∏´‡∏ô‡πâ‡∏≤'] || row['Sides'] || row['sides'] || row['Page'] || 'Single';
                        const price = parseFloat(row['‡∏£‡∏≤‡∏Ñ‡∏≤'] || row['Price'] || row['price'] || row['‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡πÅ‡∏ú‡πà‡∏ô'] || 0);
                        
                        if (price > 0) {
                            // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î
                            const sizeKey = paperSize.toUpperCase().replace(/[^A-Z0-9]/g, '');
                            const colorKey = normalizeColor(color);
                            const sidesKey = normalizeSides(sides);
                            
                            const key = `${sizeKey}_${colorKey}_${sidesKey}`;
                            newPriceData[key] = price;
                            
                            console.log(`   ‚úÖ ${key}: ${price} ‡∏ö‡∏≤‡∏ó`);
                        }
                    } catch (error) {
                        console.log(`   ‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà ${index + 1}: ${error.message}`);
                    }
                });
                
                if (Object.keys(newPriceData).length > 0) {
                    priceData = { ...priceData, ...newPriceData };
                    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${Object.keys(newPriceData).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
                    return true;
                }
                
            } catch (error) {
                console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô ${fileName}: ${error.message}`);
            }
        }
    }
    
    console.log('üìù ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ default');
    return false;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
function normalizeColor(color) {
    const colorStr = color.toString().toLowerCase();
    if (colorStr.includes('‡∏™‡∏µ') || colorStr.includes('color') || colorStr.includes('c')) {
        return 'Color';
    }
    return 'BW';
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
function normalizeSides(sides) {
    const sidesStr = sides.toString().toLowerCase();
    if (sidesStr.includes('‡∏™‡∏≠‡∏á') || sidesStr.includes('double') || sidesStr.includes('2') || sidesStr.includes('‡∏´‡∏•‡∏±‡∏á')) {
        return 'Double';
    }
    return 'Single';
}

// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
loadPricesFromExcel();

console.log('Current price data:', Object.keys(priceData).length, 'entries');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
function calculatePrice(paperSize, color, sides, sheets) {
    const key = `${paperSize}_${color}_${sides}`;
    const pricePerSheet = priceData[key];
    
    if (pricePerSheet) {
        const totalPrice = pricePerSheet * sheets;
        return {
            success: true,
            pricePerSheet: pricePerSheet,
            totalPrice: totalPrice,
            details: `üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤:\nüî∏ ${paperSize} ${color === 'BW' ? '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥' : '‡∏™‡∏µ'} ${sides === 'Single' ? '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß' : '‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤'}\nüî∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${sheets} ‡πÅ‡∏ú‡πà‡∏ô\nüî∏ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${sheets} √ó ${pricePerSheet} = ${totalPrice} ‡∏ö‡∏≤‡∏ó`
        };
    }
    return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ' };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° (‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö "‡πÅ‡∏ú‡πà‡∏ô")
function parseMessage(message) {
    const text = message.toLowerCase();
    
    if (text.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || text.includes('hello') || text.includes('hi')) {
        return {
            type: 'greeting',
            response: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üòä\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°:\n"A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡πÅ‡∏ú‡πà‡∏ô"\n"A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 20 ‡πÅ‡∏ú‡πà‡∏ô"'
        };
    }
    
    // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á
    if (text.includes('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤') || text.includes('reload') || text.includes('refresh')) {
        const loaded = loadPricesFromExcel();
        return {
            type: 'system',
            response: loaded ? '‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß' : '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤ default'
        };
    }
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
    if (text.includes('‡∏£‡∏≤‡∏Ñ‡∏≤') && (text.includes('‡∏ï‡∏≤‡∏£‡∏≤‡∏á') || text.includes('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î') || text.includes('list'))) {
        return {
            type: 'price_list',
            response: generatePriceTable()
        };
    }
    
    // ‡∏à‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ - pattern ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á "‡∏´‡∏ô‡πâ‡∏≤" ‡πÅ‡∏•‡∏∞ "‡πÅ‡∏ú‡πà‡∏ô"
    const patterns = [
        // A4/A3 + ‡∏™‡∏µ + ‡∏´‡∏ô‡πâ‡∏≤/‡πÅ‡∏ú‡πà‡∏ô + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        /(\w*a4\w*).*?(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double|\d+\s*(‡∏´‡∏ô‡πâ‡∏≤|‡πÅ‡∏ú‡πà‡∏ô)|\b(‡∏´‡∏ô‡πâ‡∏≤|‡πÅ‡∏ú‡πà‡∏ô)\b).*?(\d+)/i,
        /(\w*a3\w*).*?(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double|\d+\s*(‡∏´‡∏ô‡πâ‡∏≤|‡πÅ‡∏ú‡πà‡∏ô)|\b(‡∏´‡∏ô‡πâ‡∏≤|‡πÅ‡∏ú‡πà‡∏ô)\b).*?(\d+)/i,
        
        // ‡∏™‡∏µ + A4/A3 + ‡∏´‡∏ô‡πâ‡∏≤/‡πÅ‡∏ú‡πà‡∏ô + ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        /(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(\w*a4\w*|\w*a3\w*).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double|\d+\s*(‡∏´‡∏ô‡πâ‡∏≤|‡πÅ‡∏ú‡πà‡∏ô)|\b(‡∏´‡∏ô‡πâ‡∏≤|‡πÅ‡∏ú‡πà‡∏ô)\b).*?(\d+)/i,
        
        // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô + ‡πÅ‡∏ú‡πà‡∏ô/‡∏´‡∏ô‡πâ‡∏≤ + A4/A3 + ‡∏™‡∏µ + ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß/‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤
        /(\d+).*?(‡∏´‡∏ô‡πâ‡∏≤|‡πÅ‡∏ú‡πà‡∏ô).*?(a4|a3).*?(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double)/i
    ];
    
    for (let pattern of patterns) {
        const match = message.match(pattern);
        if (match) {
            let paperSize = 'A4';
            let color = 'BW';
            let sides = 'Single';
            let sheets = 0;
            
            // ‡∏´‡∏≤ paper size
            for (let part of match) {
                if (part && part.toLowerCase().includes('a4')) paperSize = 'A4';
                if (part && part.toLowerCase().includes('a3')) paperSize = 'A3';
            }
            
            // ‡∏´‡∏≤ color
            for (let part of match) {
                if (part && (part.includes('‡∏™‡∏µ') || part.toLowerCase().includes('color'))) color = 'Color';
            }
            
            // ‡∏´‡∏≤ sides
            for (let part of match) {
                if (part && (part.includes('‡∏™‡∏≠‡∏á') || part.includes('‡∏´‡∏•‡∏±‡∏á') || part.toLowerCase().includes('double'))) sides = 'Double';
            }
            
            // ‡∏´‡∏≤ sheets (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)
            for (let part of match) {
                if (part && /^\d+$/.test(part)) {
                    sheets = parseInt(part);
                    break;
                }
            }
            
            if (sheets > 0) {
                const result = calculatePrice(paperSize, color, sides, sheets);
                return {
                    type: 'price',
                    response: result.success ? result.details : result.message
                };
            }
        }
    }
    
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ
    return {
        type: 'help',
        response: generateHelpMessage()
    };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
function generatePriceTable() {
    let table = 'üí∞ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:\n\n';
    
    const sizes = ['A4', 'A3'];
    const colors = [['BW', '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥'], ['Color', '‡∏™‡∏µ']];
    const sidesList = [['Single', '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß'], ['Double', '‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤']];
    
    sizes.forEach(size => {
        table += `üìÑ ${size}:\n`;
        colors.forEach(([colorKey, colorName]) => {
            sidesList.forEach(([sidesKey, sidesName]) => {
                const key = `${size}_${colorKey}_${sidesKey}`;
                const price = priceData[key];
                if (price) {
                    table += `‚Ä¢ ${colorName} ${sidesName}: ${price} ‡∏ö‡∏≤‡∏ó/‡πÅ‡∏ú‡πà‡∏ô\n`;
                }
            });
        });
        table += '\n';
    });
    
    table += 'üîÑ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel';
    
    return table;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
function generateHelpMessage() {
    return `üìù ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:

"A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡πÅ‡∏ú‡πà‡∏ô"
"A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 20 ‡πÅ‡∏ú‡πà‡∏ô"

üí∞ ‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤"
üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤: ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤"

üí° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤: ‡∏´‡∏ô‡πâ‡∏≤, ‡πÅ‡∏ú‡πà‡∏ô, sheets, pages`;
}

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
app.get('/', (req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Photocopy Chatbot with Excel Support</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; }
            .header { text-align: center; margin-bottom: 20px; }
            .status { padding: 15px; margin: 10px 0; border-radius: 8px; display: flex; justify-content: space-between; }
            .connected { background-color: #d4edda; color: #155724; }
            .disconnected { background-color: #f8d7da; color: #721c24; }
            .excel-info { background-color: #e7f3ff; color: #004085; }
            .chat-container { border: 2px solid #ddd; height: 400px; overflow-y: auto; padding: 15px; margin: 15px 0; border-radius: 8px; }
            .message { margin: 10px 0; padding: 12px; border-radius: 8px; white-space: pre-wrap; }
            .user { background-color: #007bff; color: white; text-align: right; margin-left: 20%; }
            .bot { background-color: #f8f9fa; border: 1px solid #e9ecef; margin-right: 20%; }
            .input-group { display: flex; gap: 10px; }
            input[type="text"] { flex: 1; padding: 12px; border: 1px solid #ddd; border-radius: 5px; }
            button { padding: 12px 20px; background-color: #007bff; color: white; border: none; cursor: pointer; border-radius: 5px; }
            button:hover { background-color: #0056b3; }
            .examples { background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; }
            .price-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 10px; margin: 15px 0; }
            .price-card { background: #fff; border: 1px solid #ddd; padding: 10px; border-radius: 5px; text-align: center; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üñ®Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h1>
            <p>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥</p>
        </div>
        
        <div class="status ${client ? 'connected' : 'disconnected'}">
            <span>LINE Bot: ${client ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}</span>
            <span>‡∏£‡∏≤‡∏Ñ‡∏≤: ${Object.keys(priceData).length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</span>
        </div>
        
        <div class="excel-info status">
            <span>üí° ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel (prices.xlsx, ‡∏£‡∏≤‡∏Ñ‡∏≤.xlsx) ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö app.js</span>
            <span>üîÑ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï</span>
        </div>
        
        <div class="examples">
            <h3>üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
            <div class="price-grid">
                <div class="price-card">
                    <strong>A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡πÅ‡∏ú‡πà‡∏ô</strong><br>
                    <small>‡πÑ‡∏î‡πâ‡∏ú‡∏•: 50 √ó ‡∏£‡∏≤‡∏Ñ‡∏≤ = ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</small>
                </div>
                <div class="price-card">
                    <strong>A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 20 ‡πÅ‡∏ú‡πà‡∏ô</strong><br>
                    <small>‡πÑ‡∏î‡πâ‡∏ú‡∏•: 20 √ó ‡∏£‡∏≤‡∏Ñ‡∏≤ = ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</small>
                </div>
                <div class="price-card">
                    <strong>‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤</strong><br>
                    <small>‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</small>
                </div>
                <div class="price-card">
                    <strong>‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤</strong><br>
                    <small>‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Excel</small>
                </div>
            </div>
        </div>
        
        <div class="chat-container" id="chatContainer">
            <div class="message bot">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ üòä

üí° ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel ‡πÅ‡∏•‡πâ‡∏ß!
üìÅ ‡∏ß‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Excel ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
üîÑ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï

‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏ä‡πà‡∏ô:
‚Ä¢ "A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡πÅ‡∏ú‡πà‡∏ô"
‚Ä¢ "A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 20 ‡πÅ‡∏ú‡πà‡∏ô"
‚Ä¢ "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤" (‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)</div>
        </div>
        
        <div class="input-group">
            <input type="text" id="messageInput" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì... (‡πÄ‡∏ä‡πà‡∏ô A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 10 ‡πÅ‡∏ú‡πà‡∏ô)" onkeypress="if(event.key==='Enter') sendMessage()">
            <button onclick="sendMessage()">‡∏™‡πà‡∏á</button>
            <button onclick="loadPriceTable()">‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤</button>
            <button onclick="reloadPrices()">‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤</button>
        </div>

        <script>
            function addMessage(text, isUser) {
                const chatContainer = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message ' + (isUser ? 'user' : 'bot');
                messageDiv.textContent = text;
                chatContainer.appendChild(messageDiv);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            async function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                if (!message) return;

                addMessage(message, true);
                input.value = '';

                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: message })
                    });
                    const data = await response.json();
                    addMessage(data.reply, false);
                } catch (error) {
                    addMessage('‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', false);
                }
            }
            
            function loadPriceTable() {
                sendMessageText('‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤');
            }
            
            function reloadPrices() {
                sendMessageText('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤');
            }
            
            function sendMessageText(text) {
                document.getElementById('messageInput').value = text;
                sendMessage();
            }
        </script>
    </body>
    </html>
    `);
});

// Health check
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        lineBot: client ? 'Connected' : 'Disconnected',
        priceEntries: Object.keys(priceData).length
    });
});

// Chat API
app.post('/chat', express.json(), (req, res) => {
    console.log('Received web message:', req.body.message);
    const result = parseMessage(req.body.message);
    console.log('Web response:', result.response);
    res.json({ reply: result.response });
});

// Reload prices API
app.post('/reload-prices', express.json(), (req, res) => {
    const loaded = loadPricesFromExcel();
    res.json({ 
        success: loaded, 
        message: loaded ? '‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å Excel ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå Excel',
        priceEntries: Object.keys(priceData).length
    });
});

// LINE Webhook
if (client && lineConfig) {
    app.post('/webhook', line.middleware(lineConfig), (req, res) => {
        console.log('üéØ LINE Webhook received successfully!');
        
        if (!req.body.events || req.body.events.length === 0) {
            return res.status(200).json({ message: 'No events' });
        }

        Promise.all(req.body.events.map(handleEvent))
            .then(() => res.status(200).json({ success: true }))
            .catch((err) => {
                console.error('LINE Event error:', err);
                res.status(500).json({ error: 'Processing failed' });
            });
    });

    async function handleEvent(event) {
        console.log('Processing LINE event:', event.type);
        
        if (event.type !== 'message' || event.message.type !== 'text') {
            return null;
        }

        console.log('LINE message:', event.message.text);
        const result = parseMessage(event.message.text);

        try {
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: result.response
            });
            console.log('‚úÖ Reply sent to LINE');
        } catch (error) {
            console.error('‚ùå LINE reply error:', error);
            throw error;
        }
    }
} else {
    app.post('/webhook', express.json(), (req, res) => {
        res.status(200).json({ message: 'LINE not configured' });
    });
}

// 404 handler
app.use((req, res) => {
    if (req.originalUrl.includes('favicon.ico')) {
        return res.status(204).end();
    }
    console.log('404:', req.originalUrl);
    res.status(404).json({ error: 'Not found' });
});

// Error handler
app.use((error, req, res, next) => {
    console.error('Express error:', error);
    res.status(500).json({ error: 'Server error' });
});

// Start server
app.listen(port, () => {
    console.log(`\nüöÄ Server running on port ${port}`);
    console.log('üåê URL: https://photocopy-chatbot.onrender.com');
    console.log('\nüìä Status:');
    console.log('- Web Interface: ‚úÖ');
    console.log('- LINE Bot:', client ? '‚úÖ Ready' : '‚ö†Ô∏è Disabled');
    console.log('- Webhook: ‚úÖ /webhook');
    console.log('- Excel Support: ‚úÖ Ready');
    console.log('- Price Entries:', Object.keys(priceData).length);
});