require('dotenv').config();

const express = require('express');
const line = require('@line/bot-sdk');

const app = express();

// Environment Variables
const channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const channelSecret = process.env.LINE_CHANNEL_SECRET;
const port = process.env.PORT || 3000;

console.log('Environment check:');
console.log('- LINE_CHANNEL_ACCESS_TOKEN:', channelAccessToken ? 'Set ‚úÖ' : 'Not set ‚ùå');
console.log('- LINE_CHANNEL_SECRET:', channelSecret ? 'Set ‚úÖ' : 'Not set ‚ùå');
console.log('- PORT:', port);

// ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE Bot
let client;
let lineConfig;
if (channelAccessToken && channelSecret) {
    lineConfig = {
        channelAccessToken: channelAccessToken,
        channelSecret: channelSecret,
    };
    client = new line.Client(lineConfig);
    console.log('LINE Bot client initialized ‚úÖ');
} else {
    console.log('LINE Bot client skipped ‚ö†Ô∏è - Missing credentials');
}

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤
const priceData = {
    'A4_BW_Single': 0.5,
    'A4_BW_Double': 1,
    'A4_Color_Single': 2,
    'A4_Color_Double': 4,
    'A3_BW_Single': 1,
    'A3_BW_Double': 2,
    'A3_Color_Single': 4,
    'A3_Color_Double': 8
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
function calculatePrice(paperSize, color, sides, pages) {
    const key = `${paperSize}_${color}_${sides}`;
    const pricePerPage = priceData[key];
    
    if (pricePerPage) {
        const totalPrice = pricePerPage * pages;
        return {
            success: true,
            pricePerPage: pricePerPage,
            totalPrice: totalPrice,
            details: `üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤:\nüî∏ ${paperSize} ${color === 'BW' ? '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥' : '‡∏™‡∏µ'} ${sides === 'Single' ? '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß' : '‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤'}\nüî∏ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${pages} ‡∏´‡∏ô‡πâ‡∏≤\nüî∏ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${pages} √ó ${pricePerPage} = ${totalPrice} ‡∏ö‡∏≤‡∏ó`
        };
    }
    return { success: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ' };
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
function parseMessage(message) {
    const text = message.toLowerCase();
    
    if (text.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || text.includes('hello') || text.includes('hi')) {
        return {
            type: 'greeting',
            response: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üòä\n‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£\n\n‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ñ‡∏≤‡∏°:\n"A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡∏´‡∏ô‡πâ‡∏≤"\n"A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 20 ‡∏´‡∏ô‡πâ‡∏≤"'
        };
    }
    
    const patterns = [
        /(\w*a4\w*).*?(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double|\d+\s*‡∏´‡∏ô‡πâ‡∏≤|\b‡∏´‡∏ô‡πâ‡∏≤\b).*?(\d+)/i,
        /(\w*a3\w*).*?(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double|\d+\s*‡∏´‡∏ô‡πâ‡∏≤|\b‡∏´‡∏ô‡πâ‡∏≤\b).*?(\d+)/i,
        /(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(\w*a4\w*|\w*a3\w*).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double|\d+\s*‡∏´‡∏ô‡πâ‡∏≤|\b‡∏´‡∏ô‡πâ‡∏≤\b).*?(\d+)/i,
        /(\d+).*?(‡∏´‡∏ô‡πâ‡∏≤).*?(a4|a3).*?(‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥|‡∏™‡∏µ|bw|color|black|white).*?(‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß|‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤|‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á|single|double)/i
    ];
    
    for (let pattern of patterns) {
        const match = message.match(pattern);
        if (match) {
            let paperSize = 'A4';
            let color = 'BW';
            let sides = 'Single';
            let pages = 0;
            
            for (let part of match) {
                if (part && part.toLowerCase().includes('a4')) paperSize = 'A4';
                if (part && part.toLowerCase().includes('a3')) paperSize = 'A3';
            }
            
            for (let part of match) {
                if (part && (part.includes('‡∏™‡∏µ') || part.toLowerCase().includes('color'))) color = 'Color';
            }
            
            for (let part of match) {
                if (part && (part.includes('‡∏™‡∏≠‡∏á') || part.includes('‡∏´‡∏•‡∏±‡∏á') || part.toLowerCase().includes('double'))) sides = 'Double';
            }
            
            for (let part of match) {
                if (part && /^\d+$/.test(part)) {
                    pages = parseInt(part);
                    break;
                }
            }
            
            if (pages > 0) {
                const result = calculatePrice(paperSize, color, sides, pages);
                return {
                    type: 'price',
                    response: result.success ? result.details : result.message
                };
            }
        }
    }
    
    return {
        type: 'help',
        response: 'üìù ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:\n\n"A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡∏´‡∏ô‡πâ‡∏≤"\n"A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 20 ‡∏´‡∏ô‡πâ‡∏≤"\n\nüí∞ ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤:\n‚Ä¢ A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: 0.5 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤: 1 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ A4 ‡∏™‡∏µ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: 2 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ A4 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤: 4 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ A3 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: 1 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ A3 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤: 2 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ A3 ‡∏™‡∏µ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: 4 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤\n‚Ä¢ A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤: 8 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤'
    };
}

// ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
app.get('/', (req, res) => {
    res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>Photocopy Chatbot</title>
        <style>
            body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
            .chat-container { border: 1px solid #ddd; height: 400px; overflow-y: auto; padding: 10px; margin: 10px 0; }
            .message { margin: 10px 0; padding: 10px; border-radius: 5px; white-space: pre-wrap; }
            .user { background-color: #007bff; color: white; text-align: right; }
            .bot { background-color: #f8f9fa; }
            input[type="text"] { width: 70%; padding: 10px; }
            button { width: 25%; padding: 10px; background-color: #007bff; color: white; border: none; cursor: pointer; }
            .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
            .connected { background-color: #d4edda; color: #155724; }
            .disconnected { background-color: #f8d7da; color: #721c24; }
        </style>
    </head>
    <body>
        <h1>üñ®Ô∏è ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</h1>
        <div class="status ${client ? 'connected' : 'disconnected'}">
            LINE Bot: ${client ? '‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'}
        </div>
        <div class="chat-container" id="chatContainer">
            <div class="message bot">‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
‡∏•‡∏≠‡∏á‡∏ñ‡∏≤‡∏°‡πÄ‡∏ä‡πà‡∏ô:
‚Ä¢ "A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡∏´‡∏ô‡πâ‡∏≤"
‚Ä¢ "A3 ‡∏™‡∏µ ‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤ 20 ‡∏´‡∏ô‡πâ‡∏≤"
‚Ä¢ "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" (‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)</div>
        </div>
        <div>
            <input type="text" id="messageInput" placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..." onkeypress="if(event.key==='Enter') sendMessage()">
            <button onclick="sendMessage()">‡∏™‡πà‡∏á</button>
        </div>

        <script>
            function addMessage(text, isUser) {
                const chatContainer = document.getElementById('chatContainer');
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message ' + (isUser ? 'user' : 'bot');
                messageDiv.textContent = text;
                chatContainer.appendChild(messageDiv);
                chatContainer.scrollTop = chatContainer.scrollHeight;
            }

            async function sendMessage() {
                const input = document.getElementById('messageInput');
                const message = input.value.trim();
                if (!message) return;

                addMessage(message, true);
                input.value = '';

                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: message })
                    });
                    const data = await response.json();
                    addMessage(data.reply, false);
                } catch (error) {
                    addMessage('‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', false);
                }
            }
        </script>
    </body>
    </html>
    `);
});

// Health check
app.get('/health', (req, res) => {
    res.status(200).json({ 
        status: 'OK', 
        timestamp: new Date().toISOString(),
        lineBot: client ? 'Connected' : 'Disconnected'
    });
});

// Chat API - ‡πÉ‡∏ä‡πâ JSON parser ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ endpoint ‡∏ô‡∏µ‡πâ
app.post('/chat', express.json(), (req, res) => {
    console.log('Received web message:', req.body.message);
    const result = parseMessage(req.body.message);
    console.log('Web response:', result.response);
    res.json({ reply: result.response });
});

// LINE Webhook - ‡πÉ‡∏ä‡πâ LINE middleware ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô JSON parser ‡∏Ç‡∏≠‡∏á Express
if (client && lineConfig) {
    app.post('/webhook', line.middleware(lineConfig), (req, res) => {
        console.log('üéØ LINE Webhook received successfully!');
        
        if (!req.body.events || req.body.events.length === 0) {
            return res.status(200).json({ message: 'No events' });
        }

        Promise.all(req.body.events.map(handleEvent))
            .then(() => res.status(200).json({ success: true }))
            .catch((err) => {
                console.error('LINE Event error:', err);
                res.status(500).json({ error: 'Processing failed' });
            });
    });

    async function handleEvent(event) {
        console.log('Processing LINE event:', event.type);
        
        if (event.type !== 'message' || event.message.type !== 'text') {
            return null;
        }

        console.log('LINE message:', event.message.text);
        const result = parseMessage(event.message.text);

        try {
            await client.replyMessage(event.replyToken, {
                type: 'text',
                text: result.response
            });
            console.log('‚úÖ Reply sent to LINE');
        } catch (error) {
            console.error('‚ùå LINE reply error:', error);
            throw error;
        }
    }
} else {
    app.post('/webhook', express.json(), (req, res) => {
        res.status(200).json({ message: 'LINE not configured' });
    });
}

// 404 handler
app.use((req, res) => {
    if (req.originalUrl.includes('favicon.ico')) {
        return res.status(204).end();
    }
    console.log('404:', req.originalUrl);
    res.status(404).json({ error: 'Not found' });
});

// Error handler
app.use((error, req, res, next) => {
    console.error('Express error:', error);
    res.status(500).json({ error: 'Server error' });
});

// Start server
app.listen(port, () => {
    console.log(`\nüöÄ Server running on port ${port}`);
    console.log('üåê URL: https://photocopy-chatbot.onrender.com');
    console.log('\nüìä Status:');
    console.log('- Web Interface: ‚úÖ');
    console.log('- LINE Bot:', client ? '‚úÖ Ready' : '‚ö†Ô∏è Disabled');
    console.log('- Webhook: ‚úÖ /webhook');
});
