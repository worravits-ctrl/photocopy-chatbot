require('dotenv').config();
process.env.TZ = 'Asia/Bangkok';

const express = require('express');
const line = require('@line/bot-sdk');
const XLSX = require('xlsx');
const path = require('path');
const fs = require('fs');

const app = express();

// Environment Variables
const channelAccessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const channelSecret = process.env.LINE_CHANNEL_SECRET;
const geminiApiKey = process.env.GEMINI_API_KEY;
const port = process.env.PORT || 3000;

console.log('Environment check:');
console.log('- LINE_CHANNEL_ACCESS_TOKEN:', channelAccessToken ? 'Set ‚úÖ' : 'Not set ‚ùå');
console.log('- LINE_CHANNEL_SECRET:', channelSecret ? 'Set ‚úÖ' : 'Not set ‚ùå');
console.log('- GEMINI_API_KEY:', geminiApiKey ? 'Set ‚úÖ' : 'Not set ‚ùå');
console.log('- PORT:', port);

// LINE Bot Setup
let client;
let lineConfig;
if (channelAccessToken && channelSecret) {
    lineConfig = {
        channelAccessToken: channelAccessToken,
        channelSecret: channelSecret,
    };
    client = new line.Client(lineConfig);
    console.log('LINE Bot client initialized ‚úÖ');
} else {
    console.log('LINE Bot client skipped ‚ö†Ô∏è - Missing credentials');
}

// Price data storage
let priceData = {};
let priceList = [];

// Load prices from Excel
function loadPricesFromExcel() {
    try {
        const filePath = path.join(__dirname, 'prices.xlsx');
        
        if (!fs.existsSync(filePath)) {
            console.log('‚ö†Ô∏è prices.xlsx not found - using default prices');
            priceList = [
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A4', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', ‡∏£‡∏≤‡∏Ñ‡∏≤: 2 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A4', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á', ‡∏£‡∏≤‡∏Ñ‡∏≤: 2.5 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A4', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏™‡∏µ', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', ‡∏£‡∏≤‡∏Ñ‡∏≤: 3 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A4', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏™‡∏µ', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á', ‡∏£‡∏≤‡∏Ñ‡∏≤: 5 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A3', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', ‡∏£‡∏≤‡∏Ñ‡∏≤: 5 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A3', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á', ‡∏£‡∏≤‡∏Ñ‡∏≤: 8 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A3', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏™‡∏µ', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', ‡∏£‡∏≤‡∏Ñ‡∏≤: 12 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A3', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏™‡∏µ', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á', ‡∏£‡∏≤‡∏Ñ‡∏≤: 20 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A5', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', ‡∏£‡∏≤‡∏Ñ‡∏≤: 0.5 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A5', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á', ‡∏£‡∏≤‡∏Ñ‡∏≤: 1 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A5', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏™‡∏µ', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß', ‡∏£‡∏≤‡∏Ñ‡∏≤: 3 },
                { ‡∏Ç‡∏ô‡∏≤‡∏î: 'A5', ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: '‡∏™‡∏µ', ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á', ‡∏£‡∏≤‡∏Ñ‡∏≤: 5 }
            ];
        } else {
            const workbook = XLSX.readFile(filePath);
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            priceList = XLSX.utils.sheet_to_json(worksheet);
            console.log('‚úÖ Loaded prices from Excel:', priceList.length, 'items');
            
            // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
            if (priceList.length > 0) {
                console.log('Sample data:', priceList[0]);
                console.log('Available columns:', Object.keys(priceList[0]));
            }
        }

        // Convert to object for faster lookup
        priceData = {};
        priceList.forEach(item => {
            const key = `${item.‡∏Ç‡∏ô‡∏≤‡∏î}_${item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó}_${item.‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö}`;
            priceData[key] = item.‡∏£‡∏≤‡∏Ñ‡∏≤;
        });

        console.log('Price data loaded:', Object.keys(priceData).length, 'entries');
        return true;

    } catch (error) {
        console.error('‚ùå Error loading Excel file:', error);
        return false;
    }
}

// Load prices on startup
loadPricesFromExcel();

// Get current date and time info
function getCurrentDateInfo() {
    const now = new Date();
    
    // ‡πÉ‡∏ä‡πâ Intl.DateTimeFormat ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    const thaiFormatter = new Intl.DateTimeFormat('th-TH', {
        timeZone: 'Asia/Bangkok',
        year: 'numeric',
        month: 'long', 
        day: 'numeric',
        weekday: 'long'
    });
    
    // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢‡πÅ‡∏ö‡∏ö parts
    const thaiTimeParts = new Intl.DateTimeFormat('en', {
        timeZone: 'Asia/Bangkok',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
    }).formatToParts(now);
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const hour = parseInt(thaiTimeParts.find(part => part.type === 'hour').value);
    const minute = parseInt(thaiTimeParts.find(part => part.type === 'minute').value);
    const year = parseInt(thaiTimeParts.find(part => part.type === 'year').value);
    const month = parseInt(thaiTimeParts.find(part => part.type === 'month').value);
    const day_num = parseInt(thaiTimeParts.find(part => part.type === 'day').value);
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Date object ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢
    const bangkokTime = new Date(year, month - 1, day_num, hour, minute);
    const day = bangkokTime.getDay(); // 0 = Sunday, 1 = Monday, etc.
    
    const thaiDate = thaiFormatter.format(now);
    const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô
    let isOpen = false;
    let shopHours = '';
    
    if (day >= 1 && day <= 5) { // Monday to Friday (‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå)
        // ‡πÄ‡∏ß‡∏•‡∏≤ 08:00-17:00
        isOpen = (hour >= 8 && hour < 17);
        shopHours = '08:00-17:00';
    } else if (day === 6) { // Saturday (‡πÄ‡∏™‡∏≤‡∏£‡πå)
        // ‡πÄ‡∏ß‡∏•‡∏≤ 09:00-17:00
        isOpen = (hour >= 9 && hour < 17);
        shopHours = '09:00-17:00';
    } else { // Sunday (‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå)
        isOpen = false;
        shopHours = '‡∏õ‡∏¥‡∏î';
    }
    
    // Debug log ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    console.log(`=== Debug Shop Hours ===
        Server Time: ${now.toISOString()}
        Server Local: ${now.toString()}
        Thai Time Parts: ${JSON.stringify(thaiTimeParts)}
        Calculated Thai Time: ${year}-${month.toString().padStart(2,'0')}-${day_num.toString().padStart(2,'0')} ${hour.toString().padStart(2,'0')}:${minute.toString().padStart(2,'0')}
        Day of week: ${day} (0=Sun, 1=Mon, ..., 6=Sat)
        Should be open: ${isOpen}
        Shop hours today: ${shopHours}
        Display time: ${time}
    ========================`);
    
    return {
        date: thaiDate,
        time: time,
        isOpen: isOpen,
        day: day,
        hour: hour,
        minute: minute,
        shopHours: shopHours
    };
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å getCurrentDateInfo()
function getDetailedShopStatus() {
    const dateInfo = getCurrentDateInfo();
    const dayNames = ['‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå', '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏û‡∏∏‡∏ò', '‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡πÄ‡∏™‡∏≤‡∏£‡πå'];
    const currentDay = dayNames[dateInfo.day];
    
    let statusMessage = '';
    let nextOpenTime = '';
    
    if (dateInfo.isOpen) {
        // ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
        let closeTime = '';
        if (dateInfo.day >= 1 && dateInfo.day <= 6) {
            closeTime = '17:00';
        }
        statusMessage = `üü¢ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ${closeTime} ‡∏ô.)`;
    } else {
        // ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î - ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
        if (dateInfo.day === 0) { // ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå
            nextOpenTime = '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 08:00 ‡∏ô.';
        } else if (dateInfo.day === 6 && dateInfo.hour >= 17) { // ‡πÄ‡∏™‡∏≤‡∏£‡πå‡∏´‡∏•‡∏±‡∏á 17:00
            nextOpenTime = '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 08:00 ‡∏ô.';
        } else if (dateInfo.day >= 1 && dateInfo.day <= 5) {
            // ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå
            if (dateInfo.hour < 8) {
                nextOpenTime = `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ 08:00 ‡∏ô.`;
            } else {
                nextOpenTime = '‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ 08:00 ‡∏ô.';
            }
        } else if (dateInfo.day === 6) {
            // ‡πÄ‡∏™‡∏≤‡∏£‡πå
            if (dateInfo.hour < 9) {
                nextOpenTime = `‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ 09:00 ‡∏ô.`;
            } else {
                nextOpenTime = '‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå 08:00 ‡∏ô.';
            }
        }
        statusMessage = `üî¥ ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î (‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á: ${nextOpenTime})`;
    }
    
    return {
        ...dateInfo,
        currentDay: currentDay,
        statusMessage: statusMessage,
        nextOpenTime: nextOpenTime
    };
}

// ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getBusinessContext() ‡πÄ‡∏î‡∏¥‡∏°
function getBusinessContext() {
    let priceText = '';
    priceList.forEach(item => {
        priceText += `- ${item.‡∏Ç‡∏ô‡∏≤‡∏î} ${item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó} ${item.‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö}: ${item.‡∏£‡∏≤‡∏Ñ‡∏≤} ‡∏ö‡∏≤‡∏ó/‡πÅ‡∏ú‡πà‡∏ô\n`;
    });

    const shopStatus = getDetailedShopStatus();

    return `‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ AI ‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô "It_Business" ‡∏£‡πâ‡∏≤‡∏ô‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡πå‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏™‡∏π‡∏á

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:
- ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${shopStatus.date}
- ‡πÄ‡∏ß‡∏•‡∏≤: ${shopStatus.time} ‡∏ô.
- ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô: ${shopStatus.statusMessage}

‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô:
- ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô: It_Business
- ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£: ‡∏£‡∏±‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£, ‡πÄ‡∏Ñ‡∏•‡∏∑‡∏≠‡∏ö‡∏ö‡∏±‡∏ï‡∏£, ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å LINE/Email
- ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: 136/2 ‡∏´‡∏°‡∏π‡πà10 ‡∏ï‡∏≥‡∏ö‡∏•‡∏ß‡∏±‡∏î‡∏õ‡∏£‡∏∞‡∏î‡∏π‡πà ‡∏≠.‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à.‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ 84000
- ‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå: 093-5799850
- LINE ID: ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô
- ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 08:00-17:00, ‡πÄ‡∏™‡∏≤‡∏£‡πå 09:00-17:00, ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡∏õ‡∏¥‡∏î
- ‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô: ‡∏û‡∏µ‡πà‡πÄ‡∏ß‡∏ü
- ‡∏û‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô: ‡∏•‡∏∏‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏£‡πå
- ‡∏à‡∏∏‡∏î‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï: ‡πÉ‡∏Å‡∏•‡πâ TheHub Hotel, Central Plaza, ‡πÉ‡∏ô‡∏ö‡∏£‡∏¥‡πÄ‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏µ‡∏Ç‡∏ô‡∏™‡πà‡∏á‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ

‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£:
${priceText}

‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô:
- 100 ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡∏•‡∏î 10%
- 500 ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡∏•‡∏î 15%
- 1000 ‡πÅ‡∏ú‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡πÑ‡∏õ ‡∏•‡∏î 20%

‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ:
- ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏°: 20-100 ‡∏ö‡∏≤‡∏ó
- ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: 3-5 ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πâ‡∏≤
- ‡∏•‡∏≤‡∏°‡∏¥‡πÄ‡∏ô‡∏ï: 10-40 ‡∏ö‡∏≤‡∏ó
- ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏†‡∏≤‡∏û: 5-50 ‡∏ö‡∏≤‡∏ó

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏•‡∏á‡∏ó‡πâ‡∏≤‡∏¢ "‡∏Ñ‡πà‡∏∞" ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°`;
}

// Calculate price function
function calculatePrice(paperSize, colorType, printType, sheets) {
    const key = `${paperSize}_${colorType}_${printType}`;
    const pricePerSheet = priceData[key];
    
    if (pricePerSheet !== undefined) {
        let totalPrice = pricePerSheet * sheets;
        let discount = 0;
        let discountText = '';
        
        if (sheets >= 1000) {
            discount = totalPrice * 0.20;
            discountText = ' (‡∏•‡∏î 20%)';
        } else if (sheets >= 500) {
            discount = totalPrice * 0.15;
            discountText = ' (‡∏•‡∏î 15%)';
        } else if (sheets >= 100) {
            discount = totalPrice * 0.10;
            discountText = ' (‡∏•‡∏î 10%)';
        }
        
        const finalPrice = totalPrice - discount;
        
        let response = 'üí∞ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤:\n';
        response += `üìÑ ${paperSize} ${colorType} ${printType}\n`;
        response += `üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${sheets} ‡πÅ‡∏ú‡πà‡∏ô\n`;
        response += `üíµ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${sheets} √ó ${pricePerSheet} = ${totalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó\n`;
        
        if (discount > 0) {
            response += `üéâ ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î${discountText}: -${discount.toFixed(2)} ‡∏ö‡∏≤‡∏ó\n`;
            response += `‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥: ${finalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó`;
        } else {
            response += `‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°: ${totalPrice.toFixed(2)} ‡∏ö‡∏≤‡∏ó`;
        }
        
        return {
            success: true,
            response: response
        };
    }
    
    return { 
        success: false, 
        response: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞'
    };
}

// Call Gemini AI
async function callGeminiAI(userMessage) {
    if (!geminiApiKey) {
        return {
            success: false,
            message: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ'
        };
    }

    try {
        const fetch = (await import('node-fetch')).default;
        
        const prompt = `${getBusinessContext()}\n\n‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°: ${userMessage}\n\n‡∏ï‡∏≠‡∏ö:`;
        
        const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=' + geminiApiKey, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }],
                generationConfig: {
                    temperature: 0.7,
                    maxOutputTokens: 500,
                }
            })
        });

        if (!response.ok) {
            throw new Error(`API request failed with status: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
            return {
                success: true,
                message: data.candidates[0].content.parts[0].text
            };
        }
        
        throw new Error('Invalid response format from AI');

    } catch (error) {
        console.error('Gemini AI Error:', error);
        return {
            success: false,
            message: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞'
        };
    }
}

// Parse message
async function parseMessage(message) {
    const text = message.toLowerCase();
    
    // Date/time queries
    if (text.includes('‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ') || text.includes('‡∏ß‡∏±‡∏ô‡∏≠‡∏∞‡πÑ‡∏£') || text.includes('‡∏Å‡∏µ‡πà‡πÇ‡∏°‡∏á') || text.includes('‡πÄ‡∏ß‡∏•‡∏≤')) {
        const dateInfo = getCurrentDateInfo();
        let response = `üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${dateInfo.date}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: ${dateInfo.time} ‡∏ô.\n`;
        
        if (text.includes('‡πÄ‡∏õ‡∏¥‡∏î') || text.includes('‡∏õ‡∏¥‡∏î') || text.includes('‡∏ó‡∏≥‡∏Å‡∏≤‡∏£')) {
            response += `üè™ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô: ${dateInfo.isOpen ? 'üü¢ ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà' : 'üî¥ ‡∏£‡πâ‡∏≤‡∏ô‡∏õ‡∏¥‡∏î'}\n`;
            response += `üìã ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£: ‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå-‡∏®‡∏∏‡∏Å‡∏£‡πå 08:00-17:00, ‡πÄ‡∏™‡∏≤‡∏£‡πå 09:00-17:00, ‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå ‡∏õ‡∏¥‡∏î`;
        }
        
        return {
            type: 'datetime',
            response: response
        };
    }
    
    // Price list request
    if (text.includes('‡∏£‡∏≤‡∏Ñ‡∏≤') && (text.includes('‡∏ï‡∏≤‡∏£‡∏≤‡∏á') || text.includes('‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'))) {
        return {
            type: 'price_list',
            response: generatePriceTable()
        };
    }

    // Price calculation
    const hasNumber = /\d+/.test(message);
    const paperSizes = {
        'a3': 'A3', 'a4': 'A4', 'a5': 'A5'
    };
    
    let detectedSize = null;
    for (let [key, value] of Object.entries(paperSizes)) {
        if (text.includes(key)) {
            detectedSize = value;
            break;
        }
    }
    
    if (hasNumber && detectedSize) {
        let colorType = text.includes('‡∏™‡∏µ') ? '‡∏™‡∏µ' : '‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥';
        let printType = text.includes('‡∏´‡∏•‡∏±‡∏á') || text.includes('‡∏™‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤') ? '‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á' : '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß';
        
        const numbers = message.match(/\d+/g);
        const sheets = Math.max(...numbers.map(n => parseInt(n)));
        
        if (sheets > 0) {
            const result = calculatePrice(detectedSize, colorType, printType, sheets);
            return {
                type: 'price',
                response: result.response
            };
        }
    }

    // AI response
    const aiResult = await callGeminiAI(message);
    return {
        type: 'ai',
        response: aiResult.success ? aiResult.message : '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≤‡∏ô It-Business ‡∏Ñ‡πà‡∏∞\n\nüìÑ ‡πÄ‡∏£‡∏≤‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏á‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ\nü§ñ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢‡∏Ñ‡πà‡∏∞\n\n‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÑ‡∏´‡∏°‡∏Ñ‡∏∞?'
    };
}

// Generate price table
function generatePriceTable() {
    if (!priceList || priceList.length === 0) {
        return '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà 093-5799850 ‡∏Ñ‡πà‡∏∞';
    }

    let table = 'üìã ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ It-Business\n\n';
    
    // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° ‡∏Ç‡∏ô‡∏≤‡∏î -> ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó -> ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    const sortedData = priceList.sort((a, b) => {
        if (a.‡∏Ç‡∏ô‡∏≤‡∏î !== b.‡∏Ç‡∏ô‡∏≤‡∏î) {
            return a.‡∏Ç‡∏ô‡∏≤‡∏î.localeCompare(b.‡∏Ç‡∏ô‡∏≤‡∏î);
        }
        if (a.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó !== b.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó) {
            return a.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó.localeCompare(b.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó);
        }
        return a.‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö.localeCompare(b.‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö);
    });
    
    let currentSize = '';
    
    sortedData.forEach(item => {
        const size = item.‡∏Ç‡∏ô‡∏≤‡∏î;
        const type = item.‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó;
        const format = item.‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö;
        const price = item.‡∏£‡∏≤‡∏Ñ‡∏≤;
        
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡πÉ‡∏´‡∏°‡πà
        if (size !== currentSize) {
            if (currentSize !== '') table += '\n';
            table += `üìè ${size}:\n`;
            currentSize = size;
        }
        
        const icon = type === '‡∏™‡∏µ' ? 'üé®' : '‚ö´';
        table += `${icon} ${type} ${format}: ${price} ‡∏ö‡∏≤‡∏ó/‡πÅ‡∏ú‡πà‡∏ô\n`;
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô
    table += '\nüéâ ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î:\n';
    table += '‚Ä¢ 100+ ‡πÅ‡∏ú‡πà‡∏ô ‡∏•‡∏î 10% üí•\n';
    table += '‚Ä¢ 500+ ‡πÅ‡∏ú‡πà‡∏ô ‡∏•‡∏î 15% üî•\n';
    table += '‚Ä¢ 1000+ ‡πÅ‡∏ú‡πà‡∏ô ‡∏•‡∏î 20% üéØ\n\n';
    
    table += 'üìû ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°: 093-5799850';
    
    return table;
}

// Web interface
app.get('/', (req, res) => {
    const html = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>It-Business - Smart Document Center</title>
        <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            
            :root {
                --primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                --secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                --success: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                --warning: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
                --danger: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
                --glass: rgba(255,255,255,0.1);
                --shadow: 0 20px 40px rgba(0,0,0,0.1);
            }
            
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                background: var(--primary);
                min-height: 100vh;
                overflow-x: hidden;
            }
            
            /* Status Bar */
            .status-bar {
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                z-index: 1000;
                background: rgba(0,0,0,0.8);
                backdrop-filter: blur(10px);
                padding: 8px 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                font-size: 12px;
                color: white;
            }
            
            .status-item {
                display: flex;
                align-items: center;
                gap: 5px;
            }
            
            .status-dot {
                width: 8px;
                height: 8px;
                border-radius: 50%;
                animation: pulse 2s infinite;
            }
            
            .status-connected { background: #00ff00; }
            .status-disconnected { background: #ff0000; }
            
            @keyframes pulse {
                0% { opacity: 1; }
                50% { opacity: 0.5; }
                100% { opacity: 1; }
            }
            
            /* Main Container */
            .container {
                max-width: 1400px;
                margin: 0 auto;
                padding: 60px 20px 20px;
                min-height: 100vh;
                display: grid;
                grid-template-columns: 300px 1fr;
                gap: 20px;
            }
            
            /* Sidebar */
            .sidebar {
                background: var(--glass);
                backdrop-filter: blur(20px);
                border-radius: 20px;
                padding: 20px;
                box-shadow: var(--shadow);
                border: 1px solid rgba(255,255,255,0.2);
                height: fit-content;
                position: sticky;
                top: 80px;
            }
            
            .logo {
                text-align: center;
                margin-bottom: 30px;
                padding: 20px;
                background: white;
                border-radius: 15px;
                box-shadow: var(--shadow);
            }
            
            .logo h1 {
                background: var(--primary);
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                font-size: 2em;
                margin-bottom: 5px;
            }
            
            .logo p {
                color: #666;
                font-size: 14px;
            }
            
            .menu-section {
                margin-bottom: 25px;
            }
            
            .menu-title {
                color: white;
                font-weight: bold;
                margin-bottom: 15px;
                font-size: 16px;
                display: flex;
                align-items: center;
                gap: 10px;
            }
            
            .menu-btn {
                width: 100%;
                padding: 12px 15px;
                margin-bottom: 8px;
                background: rgba(255,255,255,0.1);
                border: none;
                border-radius: 12px;
                color: white;
                cursor: pointer;
                transition: all 0.3s;
                display: flex;
                align-items: center;
                gap: 10px;
                font-size: 14px;
                backdrop-filter: blur(10px);
            }
            
            .menu-btn:hover {
                background: rgba(255,255,255,0.2);
                transform: translateY(-2px);
                box-shadow: 0 10px 20px rgba(0,0,0,0.2);
            }
            
            .menu-btn.active {
                background: white;
                color: #667eea;
                font-weight: bold;
            }
            
            /* Shop Status */
            .shop-status {
                background: rgba(255,255,255,0.1);
                border-radius: 15px;
                padding: 15px;
                text-align: center;
                color: white;
                margin-top: 20px;
                border: 1px solid rgba(255,255,255,0.2);
            }
            
            .shop-status .status-icon {
                font-size: 24px;
                margin-bottom: 10px;
                display: block;
            }
            
            .shop-status.open .status-icon {
                color: #00ff88;
            }
            
            .shop-status.closed .status-icon {
                color: #ff6b6b;
            }
            
            /* Main Content */
            .main-content {
                background: white;
                border-radius: 20px;
                box-shadow: var(--shadow);
                overflow: hidden;
                display: flex;
                flex-direction: column;
                min-height: calc(100vh - 120px);
            }
            
            .chat-header {
                background: var(--primary);
                color: white;
                padding: 20px;
                text-align: center;
            }
            
            .chat-header h2 {
                font-size: 24px;
                margin-bottom: 5px;
            }
            
            .chat-header p {
                opacity: 0.9;
            }
            
            .chat-container { 
                flex: 1;
                padding: 20px;
                overflow-y: auto;
                background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
                position: relative;
            }
            
            .message { 
                margin: 15px 0; 
                padding: 15px 20px; 
                border-radius: 20px; 
                max-width: 80%; 
                animation: fadeIn 0.5s ease-out;
                position: relative;
            }
            
            @keyframes fadeIn {
                from { opacity: 0; transform: translateY(20px); }
                to { opacity: 1; transform: translateY(0); }
            }
            
            .user { 
                background: var(--primary);
                color: white; 
                margin-left: auto; 
                border-bottom-right-radius: 5px;
                box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
            }
            
            .bot { 
                background: white;
                border: 1px solid #e9ecef;
                margin-right: auto;
                border-bottom-left-radius: 5px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            }
            
            .bot::before {
                content: 'ü§ñ';
                position: absolute;
                left: -30px;
                top: 15px;
                font-size: 20px;
            }
            
            .input-section {
                padding: 20px;
                background: white;
                border-top: 1px solid #e9ecef;
            }
            
            .input-group { 
                display: flex; 
                gap: 15px; 
                align-items: center;
            }
            
            input[type="text"] { 
                flex: 1; 
                padding: 15px 25px; 
                border: 2px solid #e9ecef; 
                border-radius: 25px; 
                font-size: 16px; 
                outline: none;
                transition: all 0.3s;
            }
            
            input[type="text"]:focus { 
                border-color: #667eea;
                box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            }
            
            .send-btn { 
                padding: 15px 25px; 
                background: var(--primary);
                color: white; 
                border: none; 
                cursor: pointer; 
                border-radius: 25px; 
                font-weight: bold;
                transition: all 0.3s;
                display: flex;
                align-items: center;
                gap: 8px;
            }
            
            .send-btn:hover { 
                transform: translateY(-2px);
                box-shadow: 0 15px 30px rgba(102, 126, 234, 0.4);
            }
            
            /* Quick Actions */
            .quick-actions {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 15px;
                padding: 20px;
                background: #f8f9fa;
            }
            
            .quick-btn {
                padding: 15px;
                background: white;
                border: 2px solid #e9ecef;
                border-radius: 15px;
                cursor: pointer;
                transition: all 0.3s;
                text-align: center;
                display: flex;
                flex-direction: column;
                align-items: center;
                gap: 10px;
            }
            
            .quick-btn:hover {
                border-color: #667eea;
                transform: translateY(-3px);
                box-shadow: 0 15px 30px rgba(0,0,0,0.1);
            }
            
            .quick-btn i {
                font-size: 24px;
                color: #667eea;
            }
            
            .quick-btn span {
                font-weight: 500;
                color: #333;
            }
            
            /* Mobile Responsive */
            @media (max-width: 768px) {
                .container {
                    grid-template-columns: 1fr;
                    padding: 60px 10px 10px;
                }
                
                .sidebar {
                    position: relative;
                    top: 0;
                    order: 2;
                }
                
                .status-bar {
                    font-size: 10px;
                    padding: 5px 10px;
                }
                
                .quick-actions {
                    grid-template-columns: repeat(2, 1fr);
                }
            }
            
            /* Loading Animation */
            .typing {
                display: inline-block;
                width: 20px;
                height: 20px;
            }
            
            .typing::after {
                content: '‚óè‚óè‚óè';
                animation: typing 1.4s infinite;
                color: #999;
            }
            
            @keyframes typing {
                0% { content: '‚óè‚óã‚óã'; }
                33% { content: '‚óè‚óè‚óã'; }
                66% { content: '‚óè‚óè‚óè'; }
                100% { content: '‚óè‚óã‚óã'; }
            }
        </style>
    </head>
    <body>
        <!-- Status Bar -->
        <div class="status-bar">
            <div style="display: flex; gap: 20px;">
                <div class="status-item">
                    <div class="status-dot ${client ? 'status-connected' : 'status-disconnected'}"></div>
                    <span>LINE Bot</span>
                </div>
                <div class="status-item">
                    <div class="status-dot ${geminiApiKey ? 'status-connected' : 'status-disconnected'}"></div>
                    <span>Gemini AI</span>
                </div>
            </div>
            <div class="status-item">
                <i class="fas fa-database"></i>
                <span>${priceList.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏Ñ‡∏≤</span>
            </div>
        </div>

        <div class="container">
            <!-- Sidebar -->
            <div class="sidebar">
                <div class="logo">
                    <h1><i class="fas fa-print"></i> It-Business</h1>
                    <p>Smart Document Center</p>
                </div>

                <div class="menu-section">
                    <div class="menu-title">
                        <i class="fas fa-calculator"></i> ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤
                    </div>
                    <button class="menu-btn" onclick="sendQuickMessage('A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 50 ‡πÅ‡∏ú‡πà‡∏ô')">
                        <i class="fas fa-file-alt"></i> A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ 50 ‡πÅ‡∏ú‡πà‡∏ô
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('A4 ‡∏™‡∏µ ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á 100 ‡πÅ‡∏ú‡πà‡∏ô')">
                        <i class="fas fa-palette"></i> A4 ‡∏™‡∏µ 100 ‡πÅ‡∏ú‡πà‡∏ô
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('A3 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß 20 ‡πÅ‡∏ú‡πà‡∏ô')">
                        <i class="fas fa-expand"></i> A3 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ 20 ‡πÅ‡∏ú‡πà‡∏ô
                    </button>
                </div>

                <div class="menu-section">
                    <div class="menu-title">
                        <i class="fas fa-list"></i> ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô
                    </div>
                    <button class="menu-btn" onclick="sendQuickMessage('‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î')">
                        <i class="fas fa-table"></i> ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£')">
                        <i class="fas fa-clock"></i> ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏≤‡∏£
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô')">
                        <i class="fas fa-map-marker-alt"></i> ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå')">
                        <i class="fas fa-phone"></i> ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
                    </button>
                </div>

                <div class="menu-section">
                    <div class="menu-title">
                        <i class="fas fa-tools"></i> ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
                    </div>
                    <button class="menu-btn" onclick="sendQuickMessage('‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏°')">
                        <i class="fas fa-book"></i> ‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏°
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡πÅ‡∏Å‡∏ô')">
                        <i class="fas fa-scanner"></i> ‡∏™‡πÅ‡∏Å‡∏ô
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏•‡∏≤‡∏°‡∏¥‡πÄ‡∏ô‡∏ï')">
                        <i class="fas fa-layer-group"></i> ‡∏•‡∏≤‡∏°‡∏¥‡πÄ‡∏ô‡∏ï
                    </button>
                    <button class="menu-btn" onclick="sendQuickMessage('‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏†‡∏≤‡∏û')">
                        <i class="fas fa-image"></i> ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏†‡∏≤‡∏û
                    </button>
                </div>

                <!-- Shop Status -->
                <div class="shop-status" id="shopStatus">
                    <i class="fas fa-store status-icon"></i>
                    <div id="statusText">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...</div>
                    <div style="font-size: 12px; margin-top: 5px;">
                        ‡∏à-‡∏® 08:00-17:00<br>
                        ‡πÄ‡∏™‡∏≤‡∏£‡πå 09:00-17:00
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="main-content">
                <div class="chat-header">
                    <h2>ü§ñ AI Assistant</h2>
                    <p>‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤</p>
                </div>

                <div class="quick-actions">
                    <div class="quick-btn" onclick="sendQuickMessage('‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏≠‡∏∞‡πÑ‡∏£')">
                        <i class="fas fa-calendar-day"></i>
                        <span>‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏≠‡∏∞‡πÑ‡∏£</span>
                    </div>
                    <div class="quick-btn" onclick="sendQuickMessage('‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á')">
                        <i class="fas fa-store"></i>
                        <span>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô</span>
                    </div>
                    <div class="quick-btn" onclick="sendQuickMessage('‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô')">
                        <i class="fas fa-tags"></i>
                        <span>‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡πà‡∏ô</span>
                    </div>
                    <div class="quick-btn" onclick="sendQuickMessage('‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á')">
                        <i class="fas fa-concierge-bell"></i>
                        <span>‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</span>
                    </div>
                </div>

                <div class="chat-container" id="chat">
                    <div class="message bot">
                        ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡πà‡∏∞! üëã ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà <strong>It-Business</strong><br>
                        ‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πà‡∏≤‡∏¢‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ñ‡πà‡∏∞<br><br>
                        <strong>üéØ ‡∏•‡∏≠‡∏á‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πà‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô!</strong><br>
                        <small>üí° ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "A4 ‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥ 100 ‡πÅ‡∏ú‡πà‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏•‡πà‡∏°"</small>
                    </div>
                </div>

                <div class="input-section">
                    <div class="input-group">
                        <input type="text" id="input" placeholder="üí¨ ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì..." onkeypress="if(event.key==='Enter') send()">
                        <button class="send-btn" onclick="send()">
                            <i class="fas fa-paper-plane"></i>
                            ‡∏™‡πà‡∏á
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <script>
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô
            async function updateShopStatus() {
                try {
                    const response = await fetch('/api/shop-status');
                    const data = await response.json();
                    
                    const statusElement = document.getElementById('shopStatus');
                    const statusText = document.getElementById('statusText');
                    
                    if (data.isOpen) {
                        statusElement.className = 'shop-status open';
                        statusText.innerHTML = 'üü¢ ‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà<br><small>‡∏õ‡∏¥‡∏î‡πÄ‡∏ß‡∏•‡∏≤ 17:00</small>';
                    } else {
                        statusElement.className = 'shop-status closed';
                        statusText.innerHTML = 'üî¥ ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß<br><small>' + (data.nextOpenTime || '‡πÄ‡∏õ‡∏¥‡∏î‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ') + '</small>';
                    }
                } catch (error) {
                    console.error('Error fetching shop status:', error);
                }
            }

            function addMessage(text, isUser) {
                const chat = document.getElementById('chat');
                const div = document.createElement('div');
                div.className = 'message ' + (isUser ? 'user' : 'bot');
                div.innerHTML = text.replace(/\\n/g, '<br>');
                chat.appendChild(div);
                chat.scrollTop = chat.scrollHeight;
            }

            function showTyping() {
                const chat = document.getElementById('chat');
                const div = document.createElement('div');
                div.className = 'message bot';
                div.id = 'typing-indicator';
                div.innerHTML = '<div class="typing"></div> ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...';
                chat.appendChild(div);
                chat.scrollTop = chat.scrollHeight;
            }

            function removeTyping() {
                const typing = document.getElementById('typing-indicator');
                if (typing) typing.remove();
            }

            async function send() {
                const input = document.getElementById('input');
                const text = input.value.trim();
                if (!text) return;

                addMessage(text, true);
                input.value = '';
                showTyping();

                try {
                    const response = await fetch('/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ message: text })
                    });
                    
                    const data = await response.json();
                    removeTyping();
                    addMessage(data.reply || '‚ùå ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', false);
                } catch (error) {
                    removeTyping();
                    addMessage('üîå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á', false);
                }
            }
            
            function sendQuickMessage(text) {
                document.getElementById('input').value = text;
                send();
            }

            // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
            document.addEventListener('DOMContentLoaded', function() {
                updateShopStatus();
                document.getElementById('input').focus();
                
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
                setInterval(updateShopStatus, 60000);
            });
        </script>
    </body>
    </html>
    `;
    
    res.send(html);
});

// Chat API
app.post('/chat', express.json(), async (req, res) => {
    try {
        const result = await parseMessage(req.body.message);
        res.json({ reply: result.response });
    } catch (error) {
        console.error('Chat error:', error);
        res.json({ reply: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á' });
    }
});

// Shop status API
app.get('/api/shop-status', (req, res) => {
    const shopStatus = getDetailedShopStatus();
    res.json({
        isOpen: shopStatus.isOpen,
        currentTime: shopStatus.time,
        currentDay: shopStatus.currentDay,
        statusMessage: shopStatus.statusMessage,
        nextOpenTime: shopStatus.nextOpenTime
    });
});

// Health check
app.get('/health', (req, res) => {
    res.json({ 
        status: 'OK',
        prices: priceList.length,
        ai: geminiApiKey ? 'ready' : 'not configured',
        line: client ? 'connected' : 'not configured',
        timestamp: new Date().toISOString()
    });
});

// Price API
app.get('/api/prices', (req, res) => {
    res.json({
        success: true,
        data: priceList,
        count: priceList.length,
        lastUpdated: new Date().toISOString()
    });
});

// Test endpoint
app.get('/test', (req, res) => {
    res.redirect('/');
});

// LINE webhook
if (client && lineConfig) {
    app.post('/webhook', line.middleware(lineConfig), async (req, res) => {
        try {
            await Promise.all(req.body.events.map(handleLineEvent));
            res.json({ success: true });
        } catch (err) {
            console.error('LINE error:', err);
            res.status(500).json({ success: false, error: err.message });
        }
    });

    async function handleLineEvent(event) {
        if (event.type !== 'message' || event.message.type !== 'text') {
            return null;
        }

        try {
            const result = await parseMessage(event.message.text);
            
            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: result.response
            });
        } catch (error) {
            console.error('Error handling LINE event:', error);
            return client.replyMessage(event.replyToken, {
                type: 'text',
                text: '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
            });
        }
    }
} else {
    app.post('/webhook', (req, res) => {
        res.json({ 
            message: 'LINE Bot not configured', 
            status: 'warning',
            missingCredentials: !channelAccessToken || !channelSecret
        });
    });
}

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('Unhandled error:', err);
    res.status(500).json({ 
        success: false, 
        message: 'Internal server error',
        timestamp: new Date().toISOString()
    });
});

// 404 handler
app.use('*', (req, res) => {
    res.status(404).json({ 
        success: false, 
        message: 'Endpoint not found',
        path: req.originalUrl
    });
});

// Start server
app.listen(port, () => {
    console.log(`
========================================
     It-Business Chatbot Started!
========================================
üöÄ Server: http://localhost:${port}
üìä Prices: ${priceList.length} items loaded
ü§ñ AI: ${geminiApiKey ? 'Ready' : 'Not configured'}
üì± LINE: ${client ? 'Connected' : 'Not configured'}
üåç Environment: ${process.env.NODE_ENV || 'development'}
‚è∞ Timezone: ${process.env.TZ || 'System default'}
========================================
    `);
});